public static void printCollatz(int n) {
		// TODO
		if(n<=0){
			System.out.println("Eingabe muss größer als 0 sein!");
		}

		int counter = 1;
		while (n > 1) {
			System.out.print(n + " ");
			if(n % 2 == 0) {
				n = n / 2;
			}
			else {
				n = 3*n + 1;
			}
			counter++;
		}

		System.out.println("1");
		System.out.println("Länge: " + counter);
	}
---------------------------------------------------------------------------------------------
public static void printPowersOfTwoUpTo(int n) {
		if(n < 1) {
			System.out.println("Eingabe muss größer als 0 sein!");
			return;
		}

		int powerOfTwo = 1;
		while(powerOfTwo <= n / 2) {
			System.out.print(powerOfTwo + " ");
			powerOfTwo = powerOfTwo * 2;
		}
		System.out.println(powerOfTwo);
	}
---------------------------------------------------------------------------------------------
public static void printTriangle(int sideLength) {
		// TODO
		if(sideLength <= 0) {
			System.out.println("Eingabe muss größer als 0 sein!");
			return;
		}

		while(sideLength>0){
			int i=sideLength;
			while(i>0){
				System.out.print("*");
				i--;
			}
			System.out.print("\n");
			sideLength--;
		}
	}
---------------------------------------------------------------------------------------------
public static int calculateNumberOfDigits(int n) {
		// TODO
		int counter=0;
		if(n>=0){
			while(n!=0) {
				n = n / 10;
				counter++;
			}
		}
		System.out.print(counter);
		return counter;
	}

public static int reverseNumber(int n) {
		// TODO
		int reversedNum = 0;
		int remainder;
		while (n != 0) {
			remainder = n%10;
			n/=10;
			reversedNum = reversedNum*10 + remainder;
		}
		return reversedNum;
	}
---------------------------------------------------------------------------------------------
public static boolean isPalindrome(int n) {
		// TODO
		int i=n;				//saves the value of n
		int reversedNum = 0;
		int remainder;
		while (i != 0) {
			remainder = i%10;
			i/=10;
			reversedNum = reversedNum*10 + remainder;
		}
		if(reversedNum==i){
			return true;
		}
		else{
			return false;
		}
	}
---------------------------------------------------------------------------------------------
public static void printAsciiCodesFor(char start, int count) {
		// TODO
		int startInt = (int) start;							//type-cast
		for(int i=startInt ; i<start + count ; i++){
			System.out.println("Der ASCII-Code von '" + (char) i + "' ist "+ i +".");
		}
	}
---------------------------------------------------------------------------------------------
public static void printPrimesUpTo(int n) {
		for(int i = 2; i <= n; i++) {
			if(isPrime(i)) {
				System.out.print(i + " ");
			}
		}
	}

	public static boolean isPrime(int n) {
		if (n < 2) {
			return false;
		}
		for (int i = 2; i*i <= n; i++) {
			if (n % i == 0) {
				return false;
			}
		}
		return true;
	}
---------------------------------------------------------------------------------------------
public static void printPrimesUpTo(int n) {
		// TODO
		for(int i=2 ; i<=n ; i++){
			boolean prime=true;
			for(int j=2 ; j<i ; j++){
				if(i%j==0){
					prime=false;
				}
			}
			if(prime){
				System.out.print(i + " ");
			}
		}
	}
---------------------------------------------------------------------------------------------
public static int penguEvolution(int penguin, int years) {
		// TODO
		boolean encountered7 = false;
		for(int i=0 ; i<years ; i++){
			System.out.println("Jahr " + i + ":" + penguin);
			if (penguin!=1 && penguin!=0 && (penguin & (penguin-1))==0){
				penguin=1;
			}
			else if (penguin%2==0){
				penguin=penguin/2;
			}
			else if(penguin%7==0){
				if(!encountered7){	             //the population is encountering the size of 7 for the first time
					i+=5;
				}
				else{
					penguin=penguin*3+1;
				}
				encountered7 = !encountered7;	  //changes the statemtent of having encountered 7 as population size to true
			}
			else{
				penguin = penguin*3+1;
			}
		}
		return penguin;
	}

public static long penguPermutation(long n, long k) {
		// TODO							                exm: permutation(3,5) means possible number of tuples of 3, from 5 elements
		long res=1;						              //in permutation, 1 is always base case
		for(long i=k+1 ; i<=n ; i++){      	//to consider the remaining elements, since you start w/ the first k(exm 3) elements
										                    //n so need to consider the possible combinations with the other two
			res *= i;					                //the number of ways to choose k elements and arrange them from the remaining n - k elements.
		}								                    //in this case the 3 stones r indifferentiable, so there r 3 elements(k,4 and 5)
		return res;
	}

public static long penguPowers(int x, int i) {
		// TODO
		long res = 1;				                //set to 0, as the x^0 is always 1
		while (i-- > 0) {			              //as long as power doesn't reach 0
			long temp_res = 0;		            //resets the temp_res to 0 after each inner loop
			long temp_x = x;		              //stores the value of x so it doesn't decrement (+3+3+3..instead of +3+2+1..)
			while (temp_x-- > 0) {	          //the number of times it does it(3x3 = 3+3+3 or 4x4 = 4+4+4+4)
  			  temp_res += res;	            //adds the value of res 3x to the total
			}
			res = temp_res;			              //sets the value of rest to the next "3x3" value,
		}							                      //it goes from res 3(1+1+1) to 9(3+3+3) to 27(9+9+9) to 81(27+27+27)
		return res;					                //each step is from previous
	}								                      //KEYNOTE: TEMP_RES IS RESET TO 0 AFT EVERY LOOP
